# Ensure 'su' binary is present and executable
ls -l /system/xbin/su /system/bin/su

# Grant suid and root:root ownership to su binaries (requires remount as rw)
mount -o remount,rw /system
chmod 6755 /system/xbin/su 2>/dev/null
chown root:root /system/xbin/su 2>/dev/null
chmod 6755 /system/bin/su 2>/dev/null
chown root:root /system/bin/su 2>/dev/null
mount -o remount,ro /system

#!/bin/bash
set -e

# Version and branding
VERSION="1.0-prototype"
BRAND_NAME="Enhanced Superuser Terminal"

# Configure logging with rotation
LOG_DIR="/data/local/tmp/superuser_logs"
LOG_FILE="$LOG_DIR/superuser_install.log"
MAX_LOGS=12

# UI Components and Styling
declare -A COLORS=(
    ["RED"]="\033[0;31m"
    ["GREEN"]="\033[0;32m"
    ["BLUE"]="\033[0;34m"
    ["CYAN"]="\033[0;36m"
    ["YELLOW"]="\033[1;33m"
    ["NC"]="\033[0m"
)

# UI Functions
setup_termux_ui() {
    # Install required packages for UI
    pkg install -y \
        termux-api \
        termux-tools \
        x11-repo \
        neofetch \
        imagemagick \
        ruby \
        python \
        nodejs \
        tsu || return 1

    # Setup custom prompt
    cat > ~/.termux/shell.properties << EOF
extra-keys = [ \
    ['ESC','/','-','HOME','UP','END','PGUP','DEL'], \
    ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN','BKSP'] \
]
EOF

    # Install custom font
    mkdir -p ~/.termux/fonts
    wget -O ~/.termux/fonts/custom.ttf \
        "https://github.com/powerline/fonts/raw/master/DejaVuSansMono/DejaVu%20Sans%20Mono%20for%20Powerline.ttf"

    # Setup color scheme
    cat > ~/.termux/colors.properties << EOF
background=#000000
foreground=#00ff00
cursor=#00ff00
EOF

    # Reload Termux style
    termux-reload-settings
}

# Progress bar implementation
show_progress() {
    local current=$1
    local total=$2
    local width=50
    local percentage=$((current * 100 / total))
    local filled=$((percentage * width / 100))
    local empty=$((width - filled))
    
    printf "\r["
    printf "%${filled}s" "" | tr ' ' '█'
    printf "%${empty}s" "" | tr ' ' '░'
    printf "] %d%%" $percentage
}

# Enhanced package management
install_required_packages() {
    local packages=(
        # Basic utilities
        "coreutils" "util-linux" "procps" "net-tools"
        # Development tools
        "build-essential" "cmake" "git" "ruby" "python"
        # Network tools
        "nmap" "netcat" "openssh" "tor" "proxychains-ng"
        # Image processing
        "imagemagick" "graphicsmagick"
        # Additional languages
        "golang" "rust" "nodejs" "php"
    )
    
    local total=${#packages[@]}
    local current=0
    
    echo "Installing required packages..."
    for pkg in "${packages[@]}"; do
        ((current++))
        show_progress $current $total
        pkg install -y "$pkg" >> "$LOG_FILE" 2>&1 || {
            echo -e "\n${COLORS[RED]}Failed to install $pkg${COLORS[NC]}"
            continue
        }
    done
    echo -e "\nPackage installation completed."
}

# Network protection setup
setup_network_protection() {
    # Install required packages
    pkg install -y \
        iptables \
        ufw \
        tor \
        privoxy \
        dnscrypt-proxy || return 1

    # Configure firewall
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow ssh
    ufw enable

    # Setup Tor proxy
    cat > /data/local/tmp/torrc << EOF
SOCKSPort 9050
DNSPort 9053
EOF

    # Configure DNSCrypt
    cat > /data/local/tmp/dnscrypt-proxy.toml << EOF
listen_addresses = ['127.0.0.1:53']
server_names = ['cloudflare']
EOF
}

# Termux add-on support
setup_termux_addons() {
    local addons=(
        "termux-api"
        "termux-boot"
        "termux-float"
        "termux-tasker"
        "termux-widget"
    )
    
    for addon in "${addons[@]}"; do
        pkg install -y "$addon" || echo "Failed to install $addon"
    done
    
    # Setup permissions
    termux-setup-storage
    
    # Configure boot scripts
    mkdir -p ~/.termux/boot
    cat > ~/.termux/boot/start-services << EOF
#!/data/data/com.termux/files/usr/bin/sh
termux-wake-lock
EOF
    chmod +x ~/.termux/boot/start-services
}

# APK generation
generate_apk() {
    echo "Generating APK..."
    
    # Install build tools
    pkg install -y \
        gradle \
        android-tools \
        dx
    
    # Create basic Android project structure
    mkdir -p SuperuserApp/{app,gradle}
    
    # Generate build files (simplified version)
    cat > SuperuserApp/build.gradle << EOF
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.0'
    }
}
EOF
    
    # Build APK
    cd SuperuserApp
    gradle assembleDebug
}

# License management
setup_license() {
    local LICENSE_FILE="/data/local/tmp/superuser.license"
    local ACTIVATION_KEY=$(openssl rand -hex 16)
    
    echo "License Key: $ACTIVATION_KEY" > "$LICENSE_FILE"
    chmod 600 "$LICENSE_FILE"
    
    # Store activation status
    echo "activated=true" >> "$LICENSE_FILE"
    echo "activation_date=$(date '+%Y-%m-%d')" >> "$LICENSE_FILE"
}

# Enhanced main function
main() {
    echo -e "${COLORS[CYAN]}$BRAND_NAME v$VERSION${COLORS[NC]}"
    echo "Initializing..."
    
    # Setup logging with rotation
    mkdir -p "$LOG_DIR"
    if [ $(ls "$LOG_DIR"/*.log 2>/dev/null | wc -l) -ge $MAX_LOGS ]; then
        rm "$(ls -t "$LOG_DIR"/*.log | tail -1)"
    fi
    
    # Initialize UI
    setup_termux_ui
    
    # Install required packages
    install_required_packages
    
    # Setup network protection
    setup_network_protection
    
    # Configure Termux add-ons
    setup_termux_addons
    
    # Generate APK
    generate_apk
    
    # Setup license
    setup_license
    
    echo -e "${COLORS[GREEN]}Installation completed successfully!${COLORS[NC]}"
}

# Backup function
backup_termux() {
    local BACKUP_DIR="/sdcard/termux_backup"
    local DATE=$(date +%Y%m%d_%H%M%S)
    
    mkdir -p "$BACKUP_DIR"
    
    # Backup home directory
    tar -czf "$BACKUP_DIR/home_$DATE.tar.gz" -C $HOME . || return 1
    
    # Backup important configs
    cp -r ~/.termux "$BACKUP_DIR/termux_config_$DATE" || return 1
    
    # Backup package list
    pkg list-installed > "$BACKUP_DIR/packages_$DATE.txt" || return 1
    
    echo "Backup completed: $BACKUP_DIR"
}

# Error handling
trap 'echo -e "${COLORS[RED]}Error occurred. Check logs for details.${COLORS[NC]}"' ERR

# Run main installation
main "$@"

#!/bin/bash
set -e

# Custom color scheme for Enhanced Superuser
background=#000000
foreground=#00FF00
cursor=#00FF00

# Normal colors
color0=#000000
color1=#FF0000
color2=#00FF00
color3=#FFFF00
color4=#0000FF
color5=#FF00FF
color6=#00FFFF
color7=#FFFFFF

# Bright colors
color8=#808080
color9=#FF0000
color10=#00FF00
color11=#FFFF00
color12=#0000FF
color13=#FF00FF
color14=#00FFFF
color15=#FFFFFF

# Version and branding
VERSION="1.0-prototype"
BRAND_NAME="Enhanced Superuser Terminal"
ROOT_USER="root@superuser"

# Safe removal function
safe_remove() {
    local target="$1"
    local is_force="${2:-false}"
    
    # Security checks
    if [[ "$target" =~ ^(/system|/vendor|/data/data|/data/app|/data/local/tmp)$ ]]; then
        echo -e "${COLORS[RED]}Error: Cannot remove protected system directory${COLORS[NC]}"
        return 1
    }
    
    # Verification prompt unless force flag is set
    if [ "$is_force" != "true" ]; then
        read -p "Are you sure you want to remove $target? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return 1
        fi
    fi
    
    # Backup before removal
    if [ -e "$target" ]; then
        local backup_path="$BACKUP_DIR/$(basename "$target")_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        cp -r "$target" "$backup_path"
        rm -rf "$target"
        echo "Removed $target (Backup at $backup_path)"
    else
        echo "Target $target does not exist"
    fi
}

# Root@Superuser directory setup
setup_root_superuser() {
    local root_dirs=(
        "/data/superuser"
        "/data/superuser/bin"
        "/data/superuser/etc"
        "/data/superuser/lib"
        "/data/superuser/tmp"
    )
    
    # Create directories with proper permissions
    for dir in "${root_dirs[@]}"; do
        mkdir -p "$dir"
        chmod 700 "$dir"
        chown root:root "$dir"
    done
    
    # Setup root@superuser environment
    cat > /data/superuser/etc/profile << EOF
export PATH="/data/superuser/bin:$PATH"
export SUPERUSER_HOME="/data/superuser"
PS1='root@superuser:\w# '
EOF
    
    # Create symbolic links
    ln -sf /data/superuser/bin/su /system/xbin/su
    ln -sf /data/superuser/etc/profile /system/etc/profile.d/superuser.sh
}

# Trusted Installer configuration
setup_trusted_installer() {
    # Create trusted installer directory
    mkdir -p /data/trusted_installer
    chmod 700 /data/trusted_installer
    
    # Generate trusted installer key
    openssl genrsa -out /data/trusted_installer/private.key 4096
    chmod 600 /data/trusted_installer/private.key
    
    # Create trusted installer configuration
    cat > /data/trusted_installer/config.json << EOF
{
    "name": "Superuser Trusted Installer",
    "version": "$VERSION",
    "permissions": ["SYSTEM_MODIFY", "GODMODE"],
    "allowed_paths": ["/system", "/vendor", "/data"],
    "activation_key": "$(openssl rand -hex 32)"
}
EOF
    
    chmod 600 /data/trusted_installer/config.json
}

# Enhanced Termux properties configuration
configure_termux_properties() {
    local TERMUX_PROPERTIES="$HOME/.termux/termux.properties"
    
    # Backup existing configuration
    if [ -f "$TERMUX_PROPERTIES" ]; then
        cp "$TERMUX_PROPERTIES" "${TERMUX_PROPERTIES}.backup"
    fi
    
    # Create new configuration
    cat > "$TERMUX_PROPERTIES" << EOF
# Enhanced Superuser Terminal Configuration
allow_external_apps=true
allow_external_scripts=true
allow_termux_float=true
allow_termux_display_over_other_apps=true
terminal_margin=0
terminal_transcript_rows=8000
bell-character=vibrate
use-black-ui=true
extra-keys-style=arrows-all
bootstrap_secondary_package_repair=true
EOF
    
    # Set proper permissions
    chmod 600 "$TERMUX_PROPERTIES"
}

# Security protocols and filters
setup_security() {
    # Install security packages
    pkg install -y \
        clamav \
        apparmor \
        selinux-python \
        audit
    
    # Configure ClamAV
    freshclam
    
    # Setup AppArmor profiles
    cat > /etc/apparmor.d/superuser << EOF
#include <tunables/global>
profile superuser {
    #include <abstractions/base>
    #include <abstractions/nameservice>
    
    /data/superuser/** rwx,
    /system/xbin/su mr,
    /system/bin/* ix,
    deny /data/data/** w,
}
EOF
    
    # Configure audit rules
    cat > /etc/audit/rules.d/superuser.rules << EOF
-w /data/superuser -p wa -k superuser_access
-w /system/xbin/su -p x -k su_execution
EOF
    
    # Reload security policies
    apparmor_parser -r /etc/apparmor.d/superuser
    auditctl -R /etc/audit/rules.d/superuser.rules
}

# Bootstrap repair function
repair_bootstrap() {
    echo "Attempting to repair bootstrap..."
    
    # Backup current bootstrap
    if [ -d "$PREFIX" ]; then
        tar czf "$BACKUP_DIR/bootstrap_$(date +%Y%m%d_%H%M%S).tar.gz" "$PREFIX"
    fi
    
    # Reinstall base packages
    pkg install -y \
        termux-tools \
        termux-exec \
        termux-keyring \
        termux-am
        
    # Repair package manager
    pkg clean
    rm -f $PREFIX/var/lib/dpkg/lock*
    dpkg --configure -a
    
    # Update sources
    pkg update -y
}

# Command prompt enhancement
setup_custom_prompt() {
    cat >> $HOME/.bashrc << EOF
# Custom prompt for Superuser
PS1='\[\e[0;32m\][\[\e[0m\]\[\e[0;31m\]root@superuser\[\e[0m\]\[\e[0;32m\]]\[\e[0m\] \[\e[0;32m\]\w\[\e[0m\] # '
alias cd#='cd /'
EOF
    
    source $HOME/.bashrc
}

# Main enhancement function
enhance_superuser() {
    echo -e "${COLORS[CYAN]}Enhancing Superuser Terminal...${COLORS[NC]}"
    
    # Setup directories and permissions
    setup_root_superuser
    setup_trusted_installer
    
    # Configure Termux
    configure_termux_properties
    setup_custom_prompt
    
    # Setup security
    setup_security
    
    # Repair bootstrap if needed
    repair_bootstrap
    
    echo -e "${COLORS[GREEN]}Enhancements completed!${COLORS[NC]}"
}

# Add these to your existing main() function
main() {
    # ... (existing main function code) ...
    
    # Add new enhancements
    enhance_superuser
    
    # ... (rest of existing main function code) ...
}

# Error handling with specific error types
trap 'handle_error "${BASH_COMMAND}" "${LINENO}" "${ERROR_TYPE:-UNKNOWN}"' ERR

# Run the enhanced installation
main "$@"

- name: Test Enhanced Features
  run: |
    # Test safe removal
    mkdir -p test_dir
    ./safe_remove.sh test_dir
    if [ -d "test_dir" ]; then
      echo "Safe removal failed"
      exit 1
    fi
    
    # Test trusted installer
    if [ ! -f "/data/trusted_installer/config.json" ]; then
      echo "Trusted installer setup failed"
      exit 1
    fi
    
    # Test Termux properties
    if [ ! -f "$HOME/.termux/termux.properties" ]; then
      echo "Termux properties configuration failed"
      exit 1
    fi

#!/bin/bash
set -e

# System Detection Functions
detect_system() {
    echo "Detecting system configuration..."
    
    # OS Detection
    OS_NAME=$(getprop ro.product.system.name)
    OS_VERSION=$(getprop ro.build.version.release)
    SDK_VERSION=$(getprop ro.build.version.sdk)
    
    # CPU Detection
    CPU_INFO=$(cat /proc/cpuinfo)
    CPU_ARCH=$(uname -m)
    CPU_CORES=$(nproc)
    CPU_FREQ=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq 2>/dev/null || echo "N/A")
    
    # Kernel Detection
    KERNEL_VERSION=$(uname -r)
    KERNEL_BUILD=$(cat /proc/version)
    
    # GPU Detection
    GPU_INFO=$(dumpsys SurfaceFlinger | grep GLES)
    GPU_VENDOR=$(getprop ro.board.platform)
    
    # Save system info
    cat > "$SUPERUSER_HOME/system_info.json" << EOF
{
    "os": {
        "name": "$OS_NAME",
        "version": "$OS_VERSION",
        "sdk": "$SDK_VERSION"
    },
    "cpu": {
        "architecture": "$CPU_ARCH",
        "cores": "$CPU_CORES",
        "frequency": "$CPU_FREQ"
    },
    "gpu": {
        "info": "$GPU_INFO",
        "vendor": "$GPU_VENDOR"
    },
    "kernel": {
        "version": "$KERNEL_VERSION",
        "build": "$KERNEL_BUILD"
    }
}
EOF
}

# Network Management
setup_network() {
    # Install network tools
    pkg install -y \
        iproute2 \
        net-tools \
        wireguard-tools \
        openvpn \
        macchanger
        
    # IP address management
    change_ip() {
        local interface="${1:-wlan0}"
        # Backup current MAC
        local original_mac=$(macchanger -s "$interface" | grep "Current" | awk '{print $3}')
        
        # Change MAC address
        macchanger -r "$interface"
        # Restart interface
        ip link set "$interface" down
        ip link set "$interface" up
        
        # Setup VPN tunnel
        wg-quick up wg0 || echo "WireGuard setup failed"
    }
    
    # Create network configuration
    mkdir -p "$SUPERUSER_HOME/network"
    cat > "$SUPERUSER_HOME/network/config.json" << EOF
{
    "vpn_enabled": true,
    "mac_spoof": true,
    "dns_servers": [
        "1.1.1.1",
        "8.8.8.8"
    ]
}
EOF
}

# Registry and Authentication Management
setup_registry() {
    # Google Play Store Registry
    PLAY_STORE_DIR="$SUPERUSER_HOME/playstore"
    mkdir -p "$PLAY_STORE_DIR"
    
    # Generate device ID
    ANDROID_ID=$(settings get secure android_id)
    DEVICE_ID=$(echo -n "$ANDROID_ID" | md5sum | cut -d' ' -f1)
    
    # Create Play Store registry
    cat > "$PLAY_STORE_DIR/registry.properties" << EOF
PlayStore.deviceId=$DEVICE_ID
PlayStore.account.type=hosted_or_google
PlayStore.client.id=android-google
PlayStore.device.country=$(getprop gsm.sim.operator.iso-country)
EOF
    
    # Generate authentication key
    AUTH_KEY=$(openssl rand -base64 32)
    echo "auth.key=$AUTH_KEY" >> "$PLAY_STORE_DIR/registry.properties"
    
    # Update build.prop
    BUILD_PROP="/system/build.prop"
    mount -o rw,remount /system
    
    # Backup build.prop
    cp "$BUILD_PROP" "$BUILD_PROP.backup"
    
    # Add custom properties
    cat >> "$BUILD_PROP" << EOF
# Enhanced Superuser Properties
ro.superuser.secure=1
ro.superuser.verify=1
ro.superuser.protected=1
EOF
}

# VMware Support
setup_vmware() {
    # Install required packages
    pkg install -y \
        qemu-system-x86_64 \
        qemu-utils \
        virglrenderer
        
    # Create VMware configuration
    mkdir -p "$SUPERUSER_HOME/vmware"
    cat > "$SUPERUSER_HOME/vmware/config.json" << EOF
{
    "vm_type": "android",
    "memory": "2048M",
    "cpu_cores": 2,
    "graphics": "virgl",
    "network": "nat"
}
EOF
    
    # Setup VM network bridge
    cat > "$SUPERUSER_HOME/vmware/network.conf" << EOF
allow_host_bridge = true
enable_vmnet = true
vmnet_type = nat
EOF
}

# Network Improvements
enhance_network() {
    # Install additional network tools
    pkg install -y \
        mtr \
        iperf3 \
        tcpdump \
        nmap
        
    # Configure network optimization
    cat > "$SUPERUSER_HOME/network/optimization.conf" << EOF
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_timestamps = 1
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fastopen = 3
net.ipv4.tcp_congestion_control = bbr
EOF
    
    # Apply network optimizations
    sysctl -p "$SUPERUSER_HOME/network/optimization.conf"
    
    # Setup firewall improvements
    iptables-save > "$SUPERUSER_HOME/network/iptables.backup"
    
    # Add enhanced firewall rules
    iptables -A INPUT -p tcp --tcp-flags ALL NONE -j DROP
    iptables -A INPUT -p tcp --tcp-flags ALL ALL -j DROP
    iptables -A INPUT -f -j DROP
    iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j DROP
}

# Update main() function
main() {
    echo -e "${COLORS[CYAN]}$BRAND_NAME v$VERSION${COLORS[NC]}"
    
    # System detection
    detect_system
    
    # Setup network
    setup_network
    
    # Configure registry and authentication
    setup_registry
    
    # Setup VMware support
    setup_vmware
    
    # Enhance network
    enhance_network
    
    # Run existing enhancements
    enhance_superuser
    
    echo -e "${COLORS[GREEN]}Installation and configuration completed!${COLORS[NC]}"
}

# Add to test workflow
cat << EOF >> .github/workflows/test.yml
    - name: Test System Detection
      run: |
        # Test system info generation
        if [ ! -f "$SUPERUSER_HOME/system_info.json" ]; then
          echo "System detection failed"
          exit 1
        fi
        
        # Test network configuration
        if [ ! -f "$SUPERUSER_HOME/network/config.json" ]; then
          echo "Network configuration failed"
          exit 1
        fi
        
        # Test VMware setup
        if [ ! -d "$SUPERUSER_HOME/vmware" ]; then
          echo "VMware setup failed"
          exit 1
        fi
EOF

chmod +x script.sh
sudo ./script.sh