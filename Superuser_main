#!/bin/bash
# Superuser Terminal Script
# Version: 1.0-prototype
# This script provides enhanced functionality for managing superuser access on Android devices.

set -e

# Security hardening - validate execution environment
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    echo "Error: Script must be executed directly, not sourced" >&2
    return 1 2>/dev/null || exit 1
fi

# Input validation function
validate_input() {
    local input="$1"
    local type="${2:-general}"
    
    case "$type" in
        "path")
            if [[ ! "$input" =~ ^[a-zA-Z0-9/_.-]+$ ]]; then
                echo "Error: Invalid path characters detected" >&2
                return 1
            fi
            ;;
        "command")
            if [[ "$input" =~ [;&|`$] ]]; then
                echo "Error: Dangerous command characters detected" >&2
                return 1
            fi
            ;;
        "numeric")
            if [[ ! "$input" =~ ^[0-9]+$ ]]; then
                echo "Error: Non-numeric input detected" >&2
                return 1
            fi
            ;;
    esac
    return 0
}

# Initialize default values for command line arguments with validation
if [[ $# -gt 0 ]]; then
    validate_input "$1" "command" || exit 1
fi
: "${1:=""}"

# Enhanced root check with secure elevation
secure_root_check() {
    # Skip root check if already root or in test mode
    if [ "$(id -u)" -eq 0 ] || [[ "${SKIP_ROOT_CHECK:-0}" == "1" ]] || [[ "${DRY_RUN:-0}" == "1" ]]; then
        return 0
    fi
    
    if [ "$(id -u)" -ne 0 ]; then
        echo "This script must be run as root." >&2
        echo "Attempting secure root elevation..."
        
        # Validate su binary before use
        local su_binary=""
        for potential_su in "/system/bin/su" "/system/xbin/su" "/su/bin/su"; do
            if [[ -f "$potential_su" && -x "$potential_su" ]]; then
                # Additional security check - verify it's a legitimate su binary
                if file "$potential_su" 2>/dev/null | grep -q "executable"; then
                    su_binary="$potential_su"
                    break
                fi
            fi
        done
        
        if [[ -n "$su_binary" ]]; then
            # Secure execution with argument validation
            local safe_args=""
            for arg in "$@"; do
                validate_input "$arg" "command" || exit 1
                safe_args="$safe_args '$arg'"
            done
            exec "$su_binary" -c "$(printf '%q' "$0") $safe_args"
        else
            echo "Error: No valid su binary found" >&2
            if [[ "${TERMUX_ENV:-0}" == "1" ]]; then
                echo "Hint: In Termux, try installing 'tsu' package" >&2
            fi
            exit 1
        fi
    fi
}

# Call secure root check
secure_root_check "$@"

# Confirm root access
echo "Root access confirmed (UID: $(id -u))"

# Version and branding
VERSION="1.0-prototype"
BRAND_NAME="Enhanced Superuser Terminal"

# Logging
LOG_DIR="/data/local/tmp/superuser_logs"
LOG_FILE="$LOG_DIR/superuser_install.log"
MAX_LOGS=12
mkdir -p "$LOG_DIR"

# Enhanced logging function with error handling
log() {
    local level="${1:-INFO}"
    shift || true
    local message="${*:-No message provided}"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "unknown-time")
    
    # Ensure log directory exists
    if [ ! -d "$LOG_DIR" ]; then
        mkdir -p "$LOG_DIR" 2>/dev/null || {
            echo "Warning: Could not create log directory $LOG_DIR" >&2
            return 1
        }
    fi
    
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE" 2>/dev/null || {
        echo "[$timestamp] [$level] $message"
        echo "Warning: Could not write to log file $LOG_FILE" >&2
    }
}

# Rotate logs if needed
if [ $(ls "$LOG_DIR"/*.log 2>/dev/null | wc -l) -ge $MAX_LOGS ]; then
    rm "$(ls -t "$LOG_DIR"/*.log | tail -1)"
fi

# Improved color array (declare -A for associative array)
declare -A COLORS=(
    [RED]='\033[0;31m'
    [GREEN]='\033[0;32m'
    [CYAN]='\033[0;36m'
    [YELLOW]='\033[1;33m'
    [BLUE]='\033[0;34m'
    [PURPLE]='\033[0;35m'
    [NC]='\033[0m'
)

# Enhanced dependency checker
check_dependencies() {
    echo -e "${COLORS[CYAN]}Checking system dependencies...${COLORS[NC]}"
    log "INFO" "Starting dependency check"
    
    local missing_deps=()
    local required_commands=("stat" "chmod" "chown" "mkdir" "grep" "awk" "date" "df" "uname" "cut" "head" "tail" "file" "timeout")
    local optional_commands=("file" "timeout" "getenforce" "busybox" "adb" "magisk" "su" "id" "tsu")

    # Check required commands
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_deps+=("$cmd")
            echo -e "${COLORS[RED]}✗${COLORS[NC]} Missing required command: $cmd"
        else
            echo -e "${COLORS[GREEN]}✓${COLORS[NC]} Found: $cmd"
        fi
    done
    
    # Check optional commands
    for cmd in "${optional_commands[@]}"; do
        if command -v "$cmd" >/dev/null 2>&1; then
            echo -e "${COLORS[GREEN]}✓${COLORS[NC]} Found (optional): $cmd"
        else
            echo -e "${COLORS[YELLOW]}!${COLORS[NC]} Missing (optional): $cmd"
        fi
    done
    
    # Attempt to install missing dependencies
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${COLORS[YELLOW]}Attempting to install missing dependencies...${COLORS[NC]}"
        if command -v busybox >/dev/null 2>&1; then
            echo -e "${COLORS[GREEN]}BusyBox detected - using built-in commands${COLORS[NC]}"
            # Create symlinks for missing commands if busybox is available
            for dep in "${missing_deps[@]}"; do
                if busybox "$dep" --help >/dev/null 2>&1; then
                    ln -sf "$(which busybox)" "/system/bin/$dep" 2>/dev/null || true
                fi
            done
        else
            echo -e "${COLORS[RED]}Critical dependencies missing and no BusyBox available${COLORS[NC]}"
            log "ERROR" "Missing critical dependencies: ${missing_deps[*]}"
            return 1
        fi
    fi
    
    echo -e "${COLORS[GREEN]}Dependency check completed${COLORS[NC]}"
    log "INFO" "Dependency check completed"
    return 0
}

# System information check
check_system_info() {
    echo -e "${COLORS[CYAN]}System Information Check:${COLORS[NC]}"
    log "INFO" "Starting system information check"
    
    # Enhanced Android version detection with multiple sources
    local android_version="Unknown"
    local api_level="Unknown"
    
    # Try multiple sources for Android version
    if [[ -f "/system/build.prop" ]]; then
        android_version=$(grep "ro.build.version.release" /system/build.prop 2>/dev/null | cut -d'=' -f2 | head -1 || echo "Unknown")
        api_level=$(grep "ro.build.version.sdk" /system/build.prop 2>/dev/null | cut -d'=' -f2 | head -1 || echo "Unknown")
    elif [[ -f "/vendor/build.prop" ]]; then
        android_version=$(grep "ro.vendor.build.version.release" /vendor/build.prop 2>/dev/null | cut -d'=' -f2 | head -1 || echo "Unknown")
    fi
    
    # Validate extracted values
    if [[ "$api_level" =~ ^[0-9]+$ ]]; then
        validate_input "$api_level" "numeric" || api_level="Unknown"
    fi
    
    echo -e "${COLORS[GREEN]}Android Version: $android_version (API $api_level)${COLORS[NC]}"
    log "INFO" "Android Version: $android_version (API $api_level)"
    
    # Enhanced architecture detection
    arch=$(uname -m 2>/dev/null || echo "unknown")
    local cpu_abi=""
    if [[ -f "/system/build.prop" ]]; then
        cpu_abi=$(grep "ro.product.cpu.abi=" /system/build.prop 2>/dev/null | cut -d'=' -f2 || echo "")
    fi
    
    echo -e "${COLORS[GREEN]}Architecture: $arch${COLORS[NC]}"
    if [[ -n "$cpu_abi" ]]; then
        echo -e "${COLORS[GREEN]}CPU ABI: $cpu_abi${COLORS[NC]}"
        log "INFO" "Architecture: $arch, CPU ABI: $cpu_abi"
    else
        log "INFO" "Architecture: $arch"
    fi
    
    # Check available space with error handling
    if available_space=$(df /data 2>/dev/null | tail -1 | awk '{print $4}'); then
        echo -e "${COLORS[GREEN]}Available space in /data: ${available_space}KB${COLORS[NC]}"
        log "INFO" "Available space in /data: ${available_space}KB"
    else
        echo -e "${COLORS[YELLOW]}Warning: Could not check available space in /data${COLORS[NC]}"
        log "WARN" "Could not check /data space"
    fi
    
    # Check SELinux status
    if command -v getenforce >/dev/null 2>&1; then
        selinux_status=$(getenforce 2>/dev/null || echo "Unknown")
        echo -e "${COLORS[YELLOW]}SELinux Status: $selinux_status${COLORS[NC]}"
        log "INFO" "SELinux Status: $selinux_status"
    else
        echo -e "${COLORS[YELLOW]}SELinux tools not available${COLORS[NC]}"
        log "INFO" "SELinux tools not available"
    fi
}

# Enhanced device compatibility check
check_device_compatibility() {
    echo -e "${COLORS[CYAN]}Device Compatibility Check:${COLORS[NC]}"
    log "INFO" "Starting device compatibility check"
    
    local compatibility_score=0
    local total_checks=0
    
    # Check for root access indicators
    local root_indicators=(
        "/system/app/Superuser.apk"
        "/system/etc/init.d"
        "/system/bin/busybox"
        "/data/local/tmp"
    )
    
    for indicator in "${root_indicators[@]}"; do
        ((total_checks++))
        if [ -e "$indicator" ]; then
            echo -e "${COLORS[GREEN]}✓${COLORS[NC]} Found: $indicator"
            ((compatibility_score++))
        else
            echo -e "${COLORS[RED]}✗${COLORS[NC]} Missing: $indicator"
        fi
    done
    
    # Calculate compatibility percentage
    local compatibility_percent=$((compatibility_score * 100 / total_checks))
    echo -e "${COLORS[BLUE]}Compatibility Score: $compatibility_percent%${COLORS[NC]}"
    log "INFO" "Device compatibility score: $compatibility_percent%"
    
    if [ $compatibility_percent -lt 50 ]; then
        echo -e "${COLORS[RED]}Warning: Low compatibility detected. Proceed with caution.${COLORS[NC]}"
        log "WARN" "Low compatibility detected"
    fi
}

# List of su binary locations
SU_PATHS=(
    "/system/bin/su" "/system/xbin/su" "/sbin/su" "/su/bin/su" "/su/xbin/su" "/system/sbin/su" "/magisk/.core/bin/su" "/debug_ramdisk/su" "/sbin/bin/su" "/system/su" "/system/xbin/daemonsu" "/system/xbin/busybox" "/su" "/xbin/su" "/bin/su" "/0/su"
)

# Setup root superuser directories and permissions
setup_root_superuser() {
    local root_dirs=(
        "/data/superuser"
        "/data/superuser/bin"
        "/data/superuser/etc"
        "/data/superuser/lib"
        "/data/superuser/tmp"
    )
    for dir in "${root_dirs[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            echo -e "${COLORS[YELLOW]}Created $dir${COLORS[NC]}"
        fi
        chmod 700 "$dir"
        chown root:root "$dir"
    done
    cat > /data/superuser/etc/profile << EOF
export PATH="/data/superuser/bin:$PATH"
export SUPERUSER_HOME="/data/superuser"
PS1='root@superuser:\w# '
EOF
}

# Enhanced su permissions fix with safety checks
fix_su_permissions() {
    echo -e "${COLORS[CYAN]}Fixing su binary permissions...${COLORS[NC]}"
    log "INFO" "Starting su permissions fix"
    
    local fixed_count=0
    local total_found=0
    local failed_paths=()
    
    for su_path in "${SU_PATHS[@]}"; do
        # Validate path before processing
        validate_input "$su_path" "path" || continue
        
        if [[ -f "$su_path" ]]; then
            ((total_found++))
            
            # Enhanced safety checks
            local file_type=""
            if command -v file >/dev/null 2>&1; then
                file_type=$(file "$su_path" 2>/dev/null || echo "")
            fi
            
            # Verify it's an executable and not a script
            if [[ "$file_type" =~ (executable|ELF) ]] || [[ -x "$su_path" ]]; then
                # Create timestamped backup
                local backup_dir="/data/superuser/backup"
                mkdir -p "$backup_dir" 2>/dev/null || {
                    log "WARN" "Could not create backup directory"
                    continue
                }
                
                local backup_name="$backup_dir/$(basename "$su_path").backup.$(date +%s)"
                if cp "$su_path" "$backup_name" 2>/dev/null; then
                    log "INFO" "Created backup: $backup_name"
                else
                    log "WARN" "Could not create backup for $su_path"
                fi
                
                # Apply permissions with error handling
                local success=true
                chmod 6755 "$su_path" 2>/dev/null || {
                    echo -e "${COLORS[RED]}Failed to set permissions for $su_path${COLORS[NC]}"
                    log "ERROR" "chmod failed for $su_path"
                    failed_paths+=("$su_path")
                    success=false
                }
                
                chown root:root "$su_path" 2>/dev/null || {
                    echo -e "${COLORS[RED]}Failed to set ownership for $su_path${COLORS[NC]}"
                    log "ERROR" "chown failed for $su_path"
                    if [[ "$success" == "true" ]]; then
                        failed_paths+=("$su_path")
                        success=false
                    fi
                }
                
                if [[ "$success" == "true" ]]; then
                    echo -e "${COLORS[GREEN]}Fixed permissions for $su_path${COLORS[NC]}"
                    log "INFO" "Fixed permissions for $su_path"
                    ((fixed_count++))
                fi
            else
                echo -e "${COLORS[YELLOW]}Skipping $su_path (not a valid executable)${COLORS[NC]}"
                log "WARN" "Skipped $su_path - not a valid executable"
            fi
        fi
    done
    
    echo -e "${COLORS[BLUE]}Summary: Fixed $fixed_count out of $total_found su binaries${COLORS[NC]}"
    log "INFO" "Su permissions fix completed: $fixed_count/$total_found"
    
    # Report failures and suggest recovery
    if [[ ${#failed_paths[@]} -gt 0 ]]; then
        echo -e "${COLORS[YELLOW]}Failed to fix permissions for:${COLORS[NC]}"
        for path in "${failed_paths[@]}"; do
            echo -e "${COLORS[RED]}  - $path${COLORS[NC]}"
        done
        echo -e "${COLORS[CYAN]}Recovery suggestions:${COLORS[NC]}"
        echo "  - Check if filesystem is mounted read-only"
        echo "  - Verify SELinux policy allows modifications"
        echo "  - Ensure sufficient disk space"
        return 1
    fi
    
    return 0
}

# Enhanced backup function
backup_critical_files() {
    echo -e "${COLORS[CYAN]}Creating backup of critical files...${COLORS[NC]}"
    local backup_dir="/data/superuser/backup/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$backup_dir"
    
    for su_path in "${SU_PATHS[@]}"; do
        if [ -f "$su_path" ]; then
            cp "$su_path" "$backup_dir/" 2>/dev/null && \
            echo -e "${COLORS[GREEN]}Backed up: $su_path${COLORS[NC]}" || \
            echo -e "${COLORS[RED]}Failed to backup: $su_path${COLORS[NC]}"
        fi
    done
    
    echo -e "${COLORS[BLUE]}Backup location: $backup_dir${COLORS[NC]}"
    log "INFO" "Backup created at: $backup_dir"
}

# Improved accessibility check: also test execution
check_accessibility() {
    echo -e "${COLORS[CYAN]}\nAccessibility Check Summary:${COLORS[NC]}"
    log "INFO" "Starting accessibility check"
    local all_ok=1
    local found_count=0
    local working_count=0
    local issues=()
    
    for su_path in "${SU_PATHS[@]}"; do
        validate_input "$su_path" "path" || continue
        
        if [[ -f "$su_path" ]]; then
            ((found_count++))
            local perms=$(stat -c %a "$su_path" 2>/dev/null || echo "000")
            local owner=$(stat -c %U "$su_path" 2>/dev/null || echo "unknown")
            local group=$(stat -c %G "$su_path" 2>/dev/null || echo "unknown")
            
            if [[ "$perms" == "6755" && "$owner" == "root" && "$group" == "root" ]]; then
                # Enhanced executable test with timeout and error capture
                local test_result=""
                if command -v timeout >/dev/null 2>&1; then
                    test_result=$(timeout 5 "$su_path" --version 2>&1 || timeout 5 "$su_path" -c "id" 2>&1 || echo "failed")
                else
                    # Fallback without timeout
                    test_result=$("$su_path" --version 2>&1 || "$su_path" -c "id" 2>&1 || echo "failed")
                fi
                
                if [[ "$test_result" != "failed" && ! "$test_result" =~ (not found|denied|invalid) ]]; then
                    echo -e "${COLORS[GREEN]}OK${COLORS[NC]} $su_path (6755 root:root, executable)"
                    ((working_count++))
                    log "INFO" "Su binary working: $su_path"
                else
                    echo -e "${COLORS[YELLOW]}WARN${COLORS[NC]} $su_path (permissions OK, execution failed: ${test_result:0:50})"
                    issues+=("$su_path: execution failed")
                    all_ok=0
                    log "WARN" "Su binary not executable: $su_path - $test_result"
                fi
            else
                echo -e "${COLORS[RED]}BAD${COLORS[NC]} $su_path (perms: $perms, owner: $owner:$group)"
                issues+=("$su_path: incorrect permissions/ownership")
                all_ok=0
                log "ERROR" "Su binary bad permissions: $su_path"
            fi
        fi
    done
    
    echo -e "${COLORS[BLUE]}Summary: Found $found_count su binaries, $working_count working${COLORS[NC]}"
    
    # Check root superuser dir
    if [ -d "/data/superuser" ]; then
        perms=$(stat -c %a /data/superuser)
        owner=$(stat -c %U /data/superuser)
        group=$(stat -c %G /data/superuser)
        if [ "$perms" = "700" ] && [ "$owner" = "root" ] && [ "$group" = "root" ]; then
            echo -e "${COLORS[GREEN]}OK${COLORS[NC]} /data/superuser (700 root:root)"
        else
            echo -e "${COLORS[RED]}BAD${COLORS[NC]} /data/superuser (perms: $perms, owner: $owner:$group)"
            all_ok=0
        fi
    else
        echo -e "${COLORS[RED]}MISSING${COLORS[NC]} /data/superuser"
        all_ok=0
    fi
    
    # Enhanced diagnostics for issues
    if [[ ${#issues[@]} -gt 0 ]]; then
        echo -e "${COLORS[YELLOW]}Detected Issues:${COLORS[NC]}"
        for issue in "${issues[@]}"; do
            echo -e "${COLORS[RED]}  - $issue${COLORS[NC]}"
        done
        echo -e "${COLORS[CYAN]}Troubleshooting suggestions:${COLORS[NC]}"
        echo "  - Run 'setenforce 0' to temporarily disable SELinux"
        echo "  - Check mount options: 'mount | grep system'"
        echo "  - Verify root access: 'id'"
        echo "  - Check for Magisk/SuperSU conflicts"
    fi
    
    if [[ $all_ok -eq 1 ]]; then
        echo -e "${COLORS[GREEN]}All checks passed!${COLORS[NC]}"
        log "INFO" "All accessibility checks passed"
    else
        echo -e "${COLORS[RED]}Some issues detected. Please review above.${COLORS[NC]}"
        log "ERROR" "Accessibility check failed"
    fi
    
    return $all_ok
}

# Auto-install adb if missing
install_adb_if_missing() {
    if ! command -v adb >/dev/null 2>&1; then
        echo -e "${COLORS[YELLOW]}adb not found. Attempting to install Android Platform Tools...${COLORS[NC]}"
        if command -v apt-get >/dev/null 2>&1; then
            apt-get update && apt-get install -y android-tools-adb && echo -e "${COLORS[GREEN]}adb installed.${COLORS[NC]}"
        elif command -v yum >/dev/null 2>&1; then
            yum install -y android-tools && echo -e "${COLORS[GREEN]}adb installed.${COLORS[NC]}"
        else
            echo -e "${COLORS[RED]}Could not auto-install adb. Please install it manually.${COLORS[NC]}"
        fi
    fi
}

# Android command terminal function
android_cmd_terminal() {
    install_adb_if_missing
    echo -e "${COLORS[CYAN]}Launching Android command terminal...${COLORS[NC]}"
    if ! command -v adb >/dev/null 2>&1; then
        echo -e "${COLORS[RED]}adb not found. Please install Android Platform Tools.${COLORS[NC]}"
        return 1
    fi
    adb start-server >/dev/null 2>&1
    adb shell || {
        echo -e "${COLORS[RED]}Failed to open adb shell. Is your device connected and authorized?${COLORS[NC]}"
        return 1
    }
}

# Android user account and id info
android_user_info() {
    install_adb_if_missing
    echo -e "${COLORS[CYAN]}Android User Account & ID Info:${COLORS[NC]}"
    if ! command -v adb >/dev/null 2>&1; then
        echo -e "${COLORS[RED]}adb not found. Please install Android Platform Tools.${COLORS[NC]}"
        return 1
    fi
    adb start-server >/dev/null 2>&1
    adb shell 'pm list users; id; whoami; getprop persist.sys.device_name; getprop ro.product.model; getprop ro.serialno' 2>/dev/null || {
        echo -e "${COLORS[RED]}Failed to retrieve user info. Is your device connected and authorized?${COLORS[NC]}"
        return 1
    }
}

# Auto-configure sudo/root superuser if possible
auto_configure_sudo() {
    echo -e "${COLORS[CYAN]}Checking sudo/root superuser configuration...${COLORS[NC]}"
    # Check if sudo is installed
    if ! command -v sudo >/dev/null 2>&1; then
        echo -e "${COLORS[YELLOW]}sudo not found. Attempting to install...${COLORS[NC]}"
        if command -v apt-get >/dev/null 2>&1; then
            apt-get update && apt-get install -y sudo && echo -e "${COLORS[GREEN]}sudo installed.${COLORS[NC]}"
        elif command -v yum >/dev/null 2>&1; then
            yum install -y sudo && echo -e "${COLORS[GREEN]}sudo installed.${COLORS[NC]}"
        else
            echo -e "${COLORS[RED]}Could not auto-install sudo. Please install it manually.${COLORS[NC]}"
        fi
    else
        echo -e "${COLORS[GREEN]}sudo is present.${COLORS[NC]}"
    fi
    # Ensure current user is in sudoers if not root
    if [ "$(id -u)" -ne 0 ]; then
        user=$(whoami)
        if sudo -l -U "$user" | grep -q '(ALL) ALL'; then
            echo -e "${COLORS[GREEN]}$user already has sudo privileges.${COLORS[NC]}"
        else
            echo -e "${COLORS[YELLOW]}$user does not have sudo privileges. Attempting to add...${COLORS[NC]}"
            echo "$user ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/$user >/dev/null && \
            echo -e "${COLORS[GREEN]}$user added to sudoers (NOPASSWD).${COLORS[NC]}"
        fi
    fi
}

# Test sudo/root superuser access
check_sudo_root_access() {
    echo -e "${COLORS[CYAN]}Testing sudo/root superuser access...${COLORS[NC]}"
    if [ "$(id -u)" -eq 0 ]; then
        echo -e "${COLORS[GREEN]}Already running as root.${COLORS[NC]}"
    else
        if sudo -n true 2>/dev/null; then
            echo -e "${COLORS[GREEN]}Sudo access confirmed for $(whoami).${COLORS[NC]}"
        else
            echo -e "${COLORS[RED]}Sudo access failed for $(whoami).${COLORS[NC]}"
        fi
    fi
}

# GUI mode detection and support
if [[ "${GUI_MODE:-}" == "1" ]]; then
    # Disable colored output for GUI consumption
    declare -A COLORS=(
        [RED]=''
        [GREEN]=''
        [CYAN]=''
        [YELLOW]=''
        [BLUE]=''
        [PURPLE]=''
        [NC]=''
    )
    
    # Enhanced logging for GUI
    log() {
        local level="${1:-INFO}"
        shift || true
        local message="${*:-No message provided}"
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "unknown-time")
        
        # GUI-friendly output format
        echo "GUI_LOG:[$timestamp] [$level] $message"
        
        # Also log to file
        if [[ -d "$LOG_DIR" ]]; then
            echo "[$timestamp] [$level] $message" >> "$LOG_FILE" 2>/dev/null || true
        fi
    }
fi

# GUI command handler
handle_gui_command() {
    local command="$1"
    
    case "$command" in
        "gui-status")
            echo "GUI_STATUS:root=$(id -u)"
            echo "GUI_STATUS:version=$VERSION"
            echo "GUI_STATUS:timestamp=$(date)"
            ;;
        "gui-dependencies")
            check_dependencies 2>&1 | sed 's/^/GUI_DEP:/'
            ;;
        "gui-system-info")
            check_system_info 2>&1 | sed 's/^/GUI_SYSINFO:/'
            ;;
        *)
            # Regular command handling
            main "$command"
            ;;
    esac
}

# Check if being called from GUI
if [[ "${1:-}" == gui-* ]]; then
    export GUI_MODE=1
    handle_gui_command "$1"
    exit 0
fi

# Interactive menu (missing function - adding it)
interactive_mode() {
    while true; do
        echo -e "\n${COLORS[PURPLE]}=== $BRAND_NAME v$VERSION ===${COLORS[NC]}"
        echo "1. Run full system check"
        echo "2. Fix su permissions"
        echo "3. Android command terminal"
        echo "4. Android user info"
        echo "5. Create backup"
        echo "6. View logs"
        echo "7. Exit"
        echo -n "Select option [1-7]: "
        read -r choice
        
        case $choice in
            1)
                check_system_info
                check_device_compatibility
                setup_root_superuser
                fix_su_permissions
                check_accessibility
                ;;
            2)
                fix_su_permissions
                check_accessibility
                ;;
            3)
                android_cmd_terminal
                ;;
            4)
                android_user_info
                ;;
            5)
                backup_critical_files
                ;;
            6)
                echo -e "${COLORS[CYAN]}Recent log entries:${COLORS[NC]}"
                tail -20 "$LOG_FILE" 2>/dev/null || echo "No logs found"
                ;;
            7)
                echo -e "${COLORS[GREEN]}Goodbye!${COLORS[NC]}"
                break
                ;;
            *)
                echo -e "${COLORS[RED]}Invalid option. Please try again.${COLORS[NC]}"
                ;;
        esac
        
        if [[ $choice != 7 ]]; then
            echo ""
            read -p "Press Enter to continue..."
        fi
    done
}

# Fix Termux detection conflicts
detect_termux() {
    if [[ -d "/data/data/com.termux" ]]; then
        export TERMUX_ENV=1
        export PREFIX="${PREFIX:-/data/data/com.termux/files/usr}"
        export TERMUX_HOME="/data/data/com.termux/files/home"
        
        log "INFO" "Termux environment detected"
        
        # Only auto-switch to tsu if explicitly requested
        if [[ "${AUTO_TSU:-0}" == "1" && "$(id -u)" -ne 0 ]] && command -v tsu >/dev/null 2>&1; then
            log "INFO" "Auto-switching to tsu for root access"
            exec tsu -c "$0 $*"
        fi
    fi
}

# Add missing termux_integration function
termux_integration() {
    if [[ "${TERMUX_ENV}" == "1" ]]; then
        log "INFO" "Enabling Termux integration features"
        
        # Termux API integration
        if command -v termux-notification >/dev/null 2>&1; then
            termux-notification --title "Superuser Terminal" --content "Root access session started" 2>/dev/null || true
        fi
        
        # Storage access check
        if [[ ! -d "/storage" && ! -d "$HOME/storage" ]]; then
            log "WARN" "Storage access not configured. Run: termux-setup-storage"
        fi
        
        # Set Termux-specific environment
        export TERMUX_APP_PACKAGE="com.termux"
        export SHELL="${PREFIX}/bin/bash"
        
        # Create Termux-specific directories
        mkdir -p "$TERMUX_HOME/.config" "$TERMUX_HOME/.local/share" 2>/dev/null || true
    fi
}

# Add missing termux_interactive_mode function
termux_interactive_mode() {
    while true; do
        clear
        echo -e "${COLORS[PURPLE]}╔══════════════════════════════════════════════════════╗${COLORS[NC]}"
        echo -e "${COLORS[PURPLE]}║     🔐 ENHANCED SUPERUSER TERMINAL - TERMUX 🔐       ║${COLORS[NC]}"
        echo -e "${COLORS[PURPLE]}║                   v$VERSION                           ║${COLORS[NC]}"
        echo -e "${COLORS[PURPLE]}╚══════════════════════════════════════════════════════╝${COLORS[NC]}"
        echo ""
        echo -e "${COLORS[CYAN]}📱 ANDROID OPERATIONS:${COLORS[NC]}"
        echo "1. 🔍 Full system check"
        echo "2. 🔧 Fix su permissions"
        echo "3. 📱 Android terminal"
        echo "4. 📊 Device information"
        echo "5. 💾 Create backup"
        echo ""
        echo -e "${COLORS[CYAN]}🛠️ TERMUX TOOLS:${COLORS[NC]}"
        echo "6. 🖥️ Launch GUI (VNC)"
        echo "7. 🔧 Termux tools menu"
        echo "8. 📝 View logs"
        echo "9. ⚙️ System configuration"
        echo ""
        echo "0. ❌ Exit"
        echo ""
        echo -n "Select option [0-9]: "
        read -r choice
        
        case $choice in
            1)
                echo -e "${COLORS[GREEN]}Running full system check...${COLORS[NC]}"
                check_system_info || true
                check_device_compatibility || true
                setup_root_superuser || true
                fix_su_permissions || true
                check_accessibility || true
                ;;
            2)
                echo -e "${COLORS[GREEN]}Fixing permissions...${COLORS[NC]}"
                fix_su_permissions || true
                check_accessibility || true
                ;;
            3)
                android_cmd_terminal || true
                ;;
            4)
                android_user_info || true
                if command -v termux-telephony-deviceinfo >/dev/null 2>&1; then
                    echo -e "${COLORS[CYAN]}Termux Device Info:${COLORS[NC]}"
                    termux-telephony-deviceinfo 2>/dev/null || echo "Device info not available"
                fi
                ;;
            5)
                backup_critical_files || true
                ;;
            6)
                if command -v vncserver >/dev/null 2>&1; then
                    echo -e "${COLORS[GREEN]}🖥️ Starting VNC server...${COLORS[NC]}"
                    vncserver :1 -geometry 1280x720 2>/dev/null || echo "VNC start failed"
                    echo "Connect VNC client to localhost:5901"
                else
                    echo -e "${COLORS[RED]}VNC server not installed${COLORS[NC]}"
                    echo "Install with: pkg install tigervnc"
                fi
                ;;
            7)
                local tools_menu="$TERMUX_HOME/termux_tools_menu.sh"
                if [[ -f "$tools_menu" ]]; then
                    bash "$tools_menu"
                else
                    echo -e "${COLORS[RED]}Tools menu not found at $tools_menu${COLORS[NC]}"
                fi
                ;;
            8)
                echo -e "${COLORS[CYAN]}Recent log entries:${COLORS[NC]}"
                tail -20 "$LOG_FILE" 2>/dev/null || echo "No logs found"
                ;;
            9)
                echo -e "${COLORS[CYAN]}System Configuration:${COLORS[NC]}"
                echo "Termux prefix: ${PREFIX:-Not set}"
                echo "Termux home: ${TERMUX_HOME:-Not set}"
                echo "Storage access: $(test -d /storage && echo "✅ Available" || echo "❌ Run termux-setup-storage")"
                echo "Root access: $(test "$(id -u)" -eq 0 && echo "✅ Active" || echo "❌ Not root")"
                echo "TSU available: $(command -v tsu >/dev/null && echo "✅ Yes" || echo "❌ No")"
                ;;
            0)
                echo -e "${COLORS[GREEN]}👋 Goodbye from Termux!${COLORS[NC]}"
                if command -v termux-notification >/dev/null 2>&1; then
                    termux-notification --title "Superuser Terminal" --content "Session ended" 2>/dev/null || true
                fi
                break
                ;;
            *)
                echo -e "${COLORS[RED]}❌ Invalid option. Please try again.${COLORS[NC]}"
                sleep 1
                ;;
        esac
        
        if [[ $choice != 0 ]]; then
            echo ""
            read -p "Press Enter to continue..."
        fi
    done
}

# Enhanced main function with better logic flow
main() {
    # Detect Termux environment first (but don't auto-escalate)
    detect_termux
    
    echo -e "${COLORS[CYAN]}$BRAND_NAME v$VERSION${COLORS[NC]}"
    if [[ "${TERMUX_ENV}" == "1" ]]; then
        echo -e "${COLORS[YELLOW]}🔧 Termux Environment Detected${COLORS[NC]}"
    fi
    
    log "INFO" "Starting Enhanced Superuser Terminal v$VERSION"
    
    # Enable Termux integration if detected
    if [[ "${TERMUX_ENV}" == "1" ]]; then
        termux_integration || log "WARN" "Termux integration had issues"
    fi
    
    # Pre-flight checks with better error handling
    if ! check_dependencies; then
        echo -e "${COLORS[RED]}Critical dependency check failed${COLORS[NC]}"
        log "ERROR" "Dependency check failed - continuing with limited functionality"
        # Don't exit, continue with limited functionality
    fi
    
    # Environment validation with warnings instead of hard failures
    local validation_errors=()
    
    if [[ ! -w "/data" ]]; then
        validation_errors+=("/data directory is not writable")
    fi
    
    if [[ ! -d "/system" ]] && [[ "${TERMUX_ENV}" != "1" ]]; then
        validation_errors+=("/system directory not found - may not be Android")
    fi
    
    # Check available disk space (require at least 10MB)
    local available_kb=$(df /data 2>/dev/null | tail -1 | awk '{print $4}' || echo "0")
    if [[ "$available_kb" -lt 10240 ]] && [[ "$available_kb" != "0" ]]; then
        validation_errors+=("Low disk space (have ${available_kb}KB)")
    fi
    
    if [[ ${#validation_errors[@]} -gt 0 ]]; then
        echo -e "${COLORS[YELLOW]}Environment warnings:${COLORS[NC]}"
        for error in "${validation_errors[@]}"; do
            echo -e "${COLORS[YELLOW]}  ⚠️ $error${COLORS[NC]}"
            log "WARN" "$error"
        done
    fi
    
    # Check if running interactively
    if [[ "$1" == "interactive" || "$1" == "-i" ]]; then
        if [[ "${TERMUX_ENV}" == "1" ]]; then
            termux_interactive_mode
        else
            interactive_mode
        fi
        return 0
    fi
    
    # Run system checks with error tolerance
    check_system_info || log "WARN" "System info check had issues"
    check_device_compatibility || log "WARN" "Device compatibility check had issues"
    
    # Original functionality with enhanced error handling
    auto_configure_sudo || log "WARN" "sudo configuration failed"
    check_sudo_root_access || log "WARN" "sudo access check failed"
    setup_root_superuser || {
        log "ERROR" "root superuser setup failed"
        echo -e "${COLORS[YELLOW]}Warning: Failed to setup root superuser environment${COLORS[NC]}"
        # Don't return 1, continue execution
    }
    
    if ! fix_su_permissions; then
        log "ERROR" "su permissions fix failed"
        echo -e "${COLORS[YELLOW]}Warning: Some permission fixes failed - system may be partially functional${COLORS[NC]}"
    fi
    
    check_accessibility || log "WARN" "accessibility check had issues"
    
    # Handle command line arguments with validation
    local command="${1:-check}"
    if ! validate_input "$command" "command"; then
        echo -e "${COLORS[RED]}Invalid command specified, using 'check'${COLORS[NC]}"
        command="check"
    fi
    
    case "$command" in
        "android-term")
            android_cmd_terminal || {
                log "ERROR" "Android terminal launch failed"
                echo -e "${COLORS[RED]}Failed to launch Android terminal${COLORS[NC]}"
            }
            ;;
        "android-user")
            android_user_info || {
                log "ERROR" "Android user info retrieval failed"
                echo -e "${COLORS[RED]}Failed to retrieve Android user info${COLORS[NC]}"
            }
            ;;
        "backup")
            backup_critical_files || {
                log "ERROR" "Backup creation failed"
                echo -e "${COLORS[RED]}Failed to create backup${COLORS[NC]}"
            }
            ;;
        "check")
            echo -e "${COLORS[GREEN]}Full system check completed. Check logs for details.${COLORS[NC]}"
            ;;
        *)
            echo -e "${COLORS[BLUE]}Available options:${COLORS[NC]}"
            echo "  android-term  - Launch Android terminal"
            echo "  android-user  - Show Android user info"
            echo "  backup       - Create backup of critical files"
            echo "  check        - Run full system check (default)"
            echo "  interactive  - Launch interactive mode"
            ;;
    esac
    
    log "INFO" "Enhanced Superuser Terminal session completed"
    return 0
}

# Execute main function with comprehensive error handling
main "$@" || {
    echo -e "${COLORS[RED]}Script execution encountered errors. Check logs for details.${COLORS[NC]}" >&2
    log "ERROR" "Script execution completed with errors"
    exit 1
}