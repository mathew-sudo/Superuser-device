#!/bin/bash
set -e

# Version and branding
VERSION="1.0-prototype"
BRAND_NAME="Enhanced Superuser Terminal"
ROOT_USER="root@superuser"

# Safe removal function
safe_remove() {
    local target="$1"
    local is_force="${2:-false}"
    
    # Security checks
    if [[ "$target" =~ ^(/system|/vendor|/data/data|/data/app|/data/local/tmp)$ ]]; then
        echo -e "${COLORS[RED]}Error: Cannot remove protected system directory${COLORS[NC]}"
        return 1
    }
    
    # Verification prompt unless force flag is set
    if [ "$is_force" != "true" ]; then
        read -p "Are you sure you want to remove $target? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return 1
        fi
    fi
    
    # Backup before removal
    if [ -e "$target" ]; then
        local backup_path="$BACKUP_DIR/$(basename "$target")_$(date +%Y%m%d_%H%M%S)"
        mkdir -p "$BACKUP_DIR"
        cp -r "$target" "$backup_path"
        rm -rf "$target"
        echo "Removed $target (Backup at $backup_path)"
    else
        echo "Target $target does not exist"
    fi
}

# Root@Superuser directory setup
setup_root_superuser() {
    local root_dirs=(
        "/data/superuser"
        "/data/superuser/bin"
        "/data/superuser/etc"
        "/data/superuser/lib"
        "/data/superuser/tmp"
    )
    
    # Create directories with proper permissions
    for dir in "${root_dirs[@]}"; do
        mkdir -p "$dir"
        chmod 700 "$dir"
        chown root:root "$dir"
    done
    
    # Setup root@superuser environment
    cat > /data/superuser/etc/profile << EOF
export PATH="/data/superuser/bin:$PATH"
export SUPERUSER_HOME="/data/superuser"
PS1='root@superuser:\w# '
EOF
    
    # Create symbolic links
    ln -sf /data/superuser/bin/su /system/xbin/su
    ln -sf /data/superuser/etc/profile /system/etc/profile.d/superuser.sh
}

# Trusted Installer configuration
setup_trusted_installer() {
    # Create trusted installer directory
    mkdir -p /data/trusted_installer
    chmod 700 /data/trusted_installer
    
    # Generate trusted installer key
    openssl genrsa -out /data/trusted_installer/private.key 4096
    chmod 600 /data/trusted_installer/private.key
    
    # Create trusted installer configuration
    cat > /data/trusted_installer/config.json << EOF
{
    "name": "Superuser Trusted Installer",
    "version": "$VERSION",
    "permissions": ["SYSTEM_MODIFY", "GODMODE"],
    "allowed_paths": ["/system", "/vendor", "/data"],
    "activation_key": "$(openssl rand -hex 32)"
}
EOF
    
    chmod 600 /data/trusted_installer/config.json
}

# Enhanced Termux properties configuration
configure_termux_properties() {
    local TERMUX_PROPERTIES="$HOME/.termux/termux.properties"
    
    # Backup existing configuration
    if [ -f "$TERMUX_PROPERTIES" ]; then
        cp "$TERMUX_PROPERTIES" "${TERMUX_PROPERTIES}.backup"
    fi
    
    # Create new configuration
    cat > "$TERMUX_PROPERTIES" << EOF
# Enhanced Superuser Terminal Configuration
allow_external_apps=true
allow_external_scripts=true
allow_termux_float=true
allow_termux_display_over_other_apps=true
terminal_margin=0
terminal_transcript_rows=8000
bell-character=vibrate
use-black-ui=true
extra-keys-style=arrows-all
bootstrap_secondary_package_repair=true
EOF
    
    # Set proper permissions
    chmod 600 "$TERMUX_PROPERTIES"
}

# Security protocols and filters
setup_security() {
    # Install security packages
    pkg install -y \
        clamav \
        apparmor \
        selinux-python \
        audit
    
    # Configure ClamAV
    freshclam
    
    # Setup AppArmor profiles
    cat > /etc/apparmor.d/superuser << EOF
#include <tunables/global>
profile superuser {
    #include <abstractions/base>
    #include <abstractions/nameservice>
    
    /data/superuser/** rwx,
    /system/xbin/su mr,
    /system/bin/* ix,
    deny /data/data/** w,
}
EOF
    
    # Configure audit rules
    cat > /etc/audit/rules.d/superuser.rules << EOF
-w /data/superuser -p wa -k superuser_access
-w /system/xbin/su -p x -k su_execution
EOF
    
    # Reload security policies
    apparmor_parser -r /etc/apparmor.d/superuser
    auditctl -R /etc/audit/rules.d/superuser.rules
}

# Bootstrap repair function
repair_bootstrap() {
    echo "Attempting to repair bootstrap..."
    
    # Backup current bootstrap
    if [ -d "$PREFIX" ]; then
        tar czf "$BACKUP_DIR/bootstrap_$(date +%Y%m%d_%H%M%S).tar.gz" "$PREFIX"
    fi
    
    # Reinstall base packages
    pkg install -y \
        termux-tools \
        termux-exec \
        termux-keyring \
        termux-am
        
    # Repair package manager
    pkg clean
    rm -f $PREFIX/var/lib/dpkg/lock*
    dpkg --configure -a
    
    # Update sources
    pkg update -y
}

# Command prompt enhancement
setup_custom_prompt() {
    cat >> $HOME/.bashrc << EOF
# Custom prompt for Superuser
PS1='\[\e[0;32m\][\[\e[0m\]\[\e[0;31m\]root@superuser\[\e[0m\]\[\e[0;32m\]]\[\e[0m\] \[\e[0;32m\]\w\[\e[0m\] # '
alias cd#='cd /'
EOF
    
    source $HOME/.bashrc
}

# Main enhancement function
enhance_superuser() {
    echo -e "${COLORS[CYAN]}Enhancing Superuser Terminal...${COLORS[NC]}"
    
    # Setup directories and permissions
    setup_root_superuser
    setup_trusted_installer
    
    # Configure Termux
    configure_termux_properties
    setup_custom_prompt
    
    # Setup security
    setup_security
    
    # Repair bootstrap if needed
    repair_bootstrap
    
    echo -e "${COLORS[GREEN]}Enhancements completed!${COLORS[NC]}"
}

# Add these to your existing main() function
main() {
    # ... (existing main function code) ...
    
    # Add new enhancements
    enhance_superuser
    
    # ... (rest of existing main function code) ...
}

# Error handling with specific error types
trap 'handle_error "${BASH_COMMAND}" "${LINENO}" "${ERROR_TYPE:-UNKNOWN}"' ERR

# Run the enhanced installation
main "$@"

- name: Test Enhanced Features
  run: |
    # Test safe removal
    mkdir -p test_dir
    ./safe_remove.sh test_dir
    if [ -d "test_dir" ]; then
      echo "Safe removal failed"
      exit 1
    fi
    
    # Test trusted installer
    if [ ! -f "/data/trusted_installer/config.json" ]; then
      echo "Trusted installer setup failed"
      exit 1
    fi
    
    # Test Termux properties
    if [ ! -f "$HOME/.termux/termux.properties" ]; then
      echo "Termux properties configuration failed"
      exit 1
    fi

chmod +x script.sh
sudo ./script.sh